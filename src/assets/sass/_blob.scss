@function pow($number, $exp) {
    $value: 1;
    @if $exp > 0 {
      @for $i from 1 through $exp {
        $value: $value * $number;
      }
    } @else if $exp < 0 {
      @for $i from 1 through -$exp {
        $value: $value / $number;
      }
    }
    @return $value;
  }
  @function fact($number) {
    $value: 1;
    @if $number > 0 {
      @for $i from 1 through $number {
        $value: $value * $i;
      }
    }
    @return $value;
  }
@function pi() {
    @return 3.14159265359;
  }
  
  @function rad($angle) {
    $unit: unit($angle);
    $unitless: $angle / ($angle * 0 + 1);
    // math.div($angle, $angle * 0 + 1)
    // If the angle has 'deg' as unit, convert to radians.
    @if $unit == deg {
      $unitless: $unitless / 180 * pi();
    }
    @return $unitless;
  }
  
  @function sin($angle) {
    $sin: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
      $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
    }
    @return $sin;
  }
  
  @function cos($angle) {
    $cos: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
      $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
    }
    @return $cos;
  }
  
  @function tan($angle) {
    @return sin($angle) / cos($angle);
  }

$base-bg: #f3f3f3;
$n: 8;
$pini: 50%;
$pfin: $pini;
$bdim: 15rem;
$size: $bdim $bdim;
$gimg: ();
$blur: 5px;

@function overlay($c) {
	@return linear-gradient($c, $c);
}

@function rand($max: 13, $min: 3, $unit: 1rem) {
	@return ($min + random($max - $min))*$unit
}

@for $i from 0 to $n {
	$gimg: $gimg, var(--gimg);
	
	@if $i > 0 {
		$pr: rand();
		$pa: rand(360, 0, 1deg);
		$pini: $pini, 50%;
		$pfin: $pfin, calc(50% + #{$pr*cos($pa)}) calc(50% + #{$pr*sin($pa)});
		$cs: rand(10);
		$size: $size, $cs $cs;
	}
}

 

 :before { margin: 0; height: 100% }

.wrapping {
	--gimg: radial-gradient(#000 67%, transparent 68%);
	background: linear-gradient($color-primary-cyan calc(50% - #{$bdim}), $color-primary-violet calc(50% + #{$bdim}));
	
	&:before {
		display: block;
		box-shadow: 0 0 0 2*$blur #fff;
		background: $gimg #fff;
		background-position: $pfin;
		background-repeat: no-repeat;
		background-size: $size;
		filter: blur($blur) contrast(9);
		mix-blend-mode: lighten;
		animation: ani 1s cubic-bezier(.5,-1,0,1) infinite alternate;
		content: ''
	}
}

@keyframes ani { 0% { background-position: $pini } }